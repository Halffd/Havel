import * from "havel"
import mouse, keyboard, io, window, audio, media, ai, gui, clipboard, brightnessManager

config {
    file: "~/Documents/havel.cfg"
    defaults: {
        volume: 50
        brightness: 100
        brightnessStep: 10
    }
}

devices {
    keyboard: "INSTANT Keyboard"
    mouse: "USB Mouse"
    joystick: "PS5 Controller"
}

modes {
    gaming:  { class: ["steam", "lutris", "proton", "wine"], title: ["minecraft", "genshin"] }
    streaming: { class: ["obs", "streamlabs"], title: ["twitch", "youtube"] }
    coding: { class: ["jetbrains"], title: ["code", "py", "js", "ts"] }
    typing: { class: ["*"], title: ["keybr"] }
    test: { class: ["*"], title: ["*"] }
    verbose: { class: ["*"], title: ["terminal"] }
    default: { class: ["*"], title: ["*"] }
}

on mode gaming {
    audio.volume = 100
    map {
        left: "a"
        right: "d"
        up: "w"
        down: "s"
    }
} else {
    unmap all
}

on mode streaming {
    let prev = brightnessManager.getBrightness()
    brightnessManager.setBrightness(0.5)
} else {
    brightnessManager.setBrightness(prev)
}

on mode coding {
    io.disable("!x")
    window.setTransparency(0.8)
} else {
    io.enable("!x")
    window.setTransparency(1.0)
}

on mode default {
    log "Switched to default mode."
} else {
    log "Switched to mode " + mode
}
off mode verbose {
    log "Switched to test mode."
    havel.debug = true
}
off config {
    alert "Config file not found: " + config.file | log
}

# --- HOTKEYS ---
F1 => send "hello"
!L => log "hello"
^!V => clipboard.get | upper | send

# Brightness control
F7 => brightnessManager.increaseBrightness(config.brightnessStep)
F8 => brightnessManager.decreaseBrightness(config.brightnessStep)

# --- CLIPBOARD HISTORY ---
let history = []

^+V => {
    let current = clipboard.get
    if (current != history[0]) {
        history.unshift(current)
    }
    history.trim(10)
    gui.menu("Clipboard", history) | clipboard.set
}

# --- MEDIA KEYS ---
F6 => media.toggle()

# --- AUTOMATION MACROS ---
!Insert => toggle clicking {
    while (clicking) {
        click([200, 500])
        sleep 100
        scroll(0, 1)
        sleep 10
        click([1200, 500])
        sleep 10
    }
}

F7 => repeat(10) { click([500, 300]); sleep 50 }

# --- GAME AUTOMATION EXAMPLE ---
Enter when mode gaming && title "genshin" => sequence {
    click(); sleep 30
    send "e"; sleep 100
    send "q"; sleep 2000
}

F8 => when window.active.title has "Minecraft" {
    toggle spamming {
        while (spamming) {
            send "w"
            sleep 16
        }
    }
} else {
    notify "Only works in Minecraft!"
}

# --- GUI LOCK SCREEN ---
!D => gui.window("Lock Screen") {
    io.block()
    gui.image("bg.png")
    gui.button("Close", [1800, 0]) {
        io.unblock()
        gui.close()
    }
    gui.onKey("Esc") {
        io.unblock()
        gui.close()
    }
}

# --- VARIOUS GUI TOOLS ---
F10 => gui.message("Hello World!", "Title")

F11 => {
    let name = gui.input("Enter your name:", "User Input")
    if (name) send "Hello " + name + "!"
}

F12 => {
    let action = gui.choice("Pick action:", ["Copy", "Paste", "Clear"])
    match (action) {
        "Copy" => send "^c"
        "Paste" => send "^v"
        "Clear" => send "^a{Del}"
    }
}

# --- AI OCR ---
!PrintScreen => screenshot() | ai.ocr | log | clipboard.set

# --- WOW Fishing Example ---
^F when title "World of Warcraft" => toggle fishing {
    notify "Fishing macro " + (fishing ? "ON" : "OFF")
    while (fishing) {
        send "1"
        sleep 2000
        if (screen.pixel(600,400).color == "#FF0000") {
            send "1"
            sleep 1000
        }
    }
}
